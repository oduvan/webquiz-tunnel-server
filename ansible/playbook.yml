---
- name: Configure WebQuiz Tunnel Server
  hosts: localhost
  become: yes
  connection: local

  vars:
    tunnel_user: tunneluser
    tunnel_group: tunneluser
    tunnel_socket_dir: /var/run/tunnels
    ssh_keys_dir: "{{ playbook_dir }}/files/ssh_keys"
    nginx_proxy_timeout: 300
    nginx_websocket_timeout: 3600

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - nginx
          - certbot
          - python3-certbot-nginx
          - openssh-server
        state: present

    - name: Create tunnel user
      user:
        name: "{{ tunnel_user }}"
        shell: /bin/bash
        create_home: yes
        state: present

    - name: Create socket directory
      file:
        path: "{{ tunnel_socket_dir }}"
        state: directory
        owner: "{{ tunnel_user }}"
        group: "{{ tunnel_group }}"
        mode: '2775'

    - name: Add www-data user to tunnel group for socket access
      user:
        name: www-data
        groups: "{{ tunnel_group }}"
        append: yes
      notify: reload nginx

    - name: Create .ssh directory for tunnel user
      file:
        path: "/home/{{ tunnel_user }}/.ssh"
        state: directory
        owner: "{{ tunnel_user }}"
        group: "{{ tunnel_group }}"
        mode: '0700'

    - name: Collect SSH public keys
      find:
        paths: "{{ ssh_keys_dir }}"
        patterns: "*.pub"
      register: ssh_keys
      delegate_to: localhost
      become: no

    - name: Add authorized keys for tunnel user
      authorized_key:
        user: "{{ tunnel_user }}"
        key: "{{ lookup('file', item.path) }}"
        state: present
      loop: "{{ ssh_keys.files }}"
      when: ssh_keys.files | length > 0

    - name: Configure SSH for long-lived connections
      blockinfile:
        path: /etc/ssh/sshd_config
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Tunnel Configuration"
        block: |
          ClientAliveInterval 60
          ClientAliveCountMax 10
          TCPKeepAlive yes
          MaxSessions 100
          MaxStartups 100:30:200
      notify: restart sshd

    - name: Restrict tunnel user to tunneling only
      blockinfile:
        path: /etc/ssh/sshd_config
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Tunnel User Restrictions"
        block: |
          Match User {{ tunnel_user }}
              PermitTTY no
              X11Forwarding no
              AllowAgentForwarding no
              AllowTcpForwarding remote
              ForceCommand /bin/false
              # StreamLocalBindMask 0117 sets socket permissions to 0660 (owner+group read/write)
              # This allows nginx (www-data user in tunneluser group) to access SSH-created sockets
              StreamLocalBindMask 0117
      notify: restart sshd

    - name: Configure system limits
      blockinfile:
        path: /etc/security/limits.conf
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Tunnel Limits"
        block: |
          {{ tunnel_user }}    soft    nofile    65536
          {{ tunnel_user }}    hard    nofile    65536
          {{ tunnel_user }}    soft    nproc     4096
          {{ tunnel_user }}    hard    nproc     4096
          *                    soft    nofile    65536
          *                    hard    nofile    65536

    - name: Configure sysctl for network tuning
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - {name: 'fs.file-max', value: '2097152'}
        - {name: 'net.core.somaxconn', value: '4096'}
        - {name: 'net.ipv4.tcp_max_syn_backlog', value: '4096'}
        - {name: 'net.ipv4.ip_local_port_range', value: '1024 65535'}
        - {name: 'net.ipv4.tcp_tw_reuse', value: '1'}
        - {name: 'net.ipv4.tcp_fin_timeout', value: '30'}
        - {name: 'net.ipv4.tcp_keepalive_time', value: '600'}
        - {name: 'net.ipv4.tcp_keepalive_intvl', value: '60'}
        - {name: 'net.ipv4.tcp_keepalive_probes', value: '10'}

    - name: Determine server host for URLs
      set_fact:
        tunnel_server_host: "{{ ansible_default_ipv4.address | default(ansible_fqdn | default('your-server')) }}"

    - name: Check if SSL certificate exists
      stat:
        path: /etc/letsencrypt/live/webquiz.xyz/fullchain.pem
      register: ssl_cert_check

    - name: Set SSL availability fact
      set_fact:
        ssl_available: "{{ ssl_cert_check.stat.exists }}"

    - name: Create tunnel configuration YAML file
      template:
        src: tunnel_config.yaml.j2
        dest: /var/www/html/tunnel_config.yaml
        mode: '0644'
        owner: www-data
        group: www-data

    - name: Create nginx configuration for tunnel proxy
      template:
        src: nginx-tunnel-proxy.conf.j2
        dest: /etc/nginx/sites-available/tunnel-proxy
        mode: '0644'
      notify: reload nginx

    - name: Enable nginx tunnel proxy site
      file:
        src: /etc/nginx/sites-available/tunnel-proxy
        dest: /etc/nginx/sites-enabled/tunnel-proxy
        state: link
      notify: reload nginx

    - name: Remove default nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: reload nginx

    - name: Ensure nginx is started and enabled
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Obtain SSL certificate with certbot (if not exists)
      command: >
        certbot certonly --webroot
        -w /var/www/html
        --non-interactive
        --agree-tos
        --email admin@webquiz.xyz
        -d webquiz.xyz
      when: not ssl_available
      register: certbot_result
      failed_when: false

    - name: Log certbot result
      debug:
        msg: "Certbot result: {{ certbot_result }}"
      when: not ssl_available

    - name: Warn if certbot failed
      debug:
        msg: "WARNING: Certbot failed to obtain SSL certificate. HTTPS will not be available. Please check DNS configuration and ensure port 80 is accessible from the internet. Error: {{ certbot_result.stderr }}"
      when: not ssl_available and certbot_result.rc != 0

    - name: Re-run playbook to enable HTTPS (if certificates were obtained)
      command: >
        ansible-pull
        -U https://github.com/oduvan/webquiz-tunnel-server.git
        -i localhost,
        ansible/playbook.yml
      when: not ssl_available and certbot_result.rc == 0

    - name: Ensure ssh is started and enabled
      service:
        name: ssh
        state: started
        enabled: yes

    - name: Install lsof for socket checking
      apt:
        name: lsof
        state: present

    - name: Deploy socket cleanup script
      copy:
        src: scripts/cleanup-sockets.sh
        dest: /usr/local/bin/cleanup-sockets.sh
        mode: '0755'
        owner: root
        group: root

    - name: Create log file for cleanup script
      file:
        path: /var/log/tunnel-cleanup.log
        state: touch
        mode: '0644'
        owner: root
        group: root
        modification_time: preserve
        access_time: preserve

    - name: Setup cron job for socket cleanup
      cron:
        name: "Cleanup inactive tunnel sockets"
        minute: "*/5"
        job: "/usr/local/bin/cleanup-sockets.sh"
        user: root
        state: present

  handlers:
    - name: restart sshd
      service:
        name: ssh
        state: restarted

    - name: reload nginx
      service:
        name: nginx
        state: reloaded
