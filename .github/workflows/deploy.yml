---
name: Deploy Server Configuration

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy via Ansible Pull
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Execute Ansible Pull on Remote Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script_stop: true
          script: |
            # Wait for dpkg lock to be released (handles unattended-upgrade conflicts)
            wait_for_lock() {
              echo "Waiting for dpkg lock to be released..."
              while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 || \
                    sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1 || \
                    sudo fuser /var/cache/apt/archives/lock >/dev/null 2>&1; do
                echo "Lock is held, waiting 5 seconds..."
                sleep 5
              done
              echo "Lock released, proceeding..."
            }

            # Install Ansible if not present
            if ! command -v ansible-pull &> /dev/null; then
              echo "Installing Ansible..."
              wait_for_lock
              sudo apt-get update
              wait_for_lock
              sudo apt-get install -y software-properties-common
              wait_for_lock
              sudo apt-add-repository --yes --update ppa:ansible/ansible
              wait_for_lock
              sudo apt-get install -y ansible
            fi

            # Run ansible-pull
            sudo ansible-pull \
              -U https://github.com/${{ github.repository }}.git \
              -C ${{ github.sha }} \
              -i localhost, \
              ansible/playbook.yml

  create-failure-issue:
    name: Create Issue on Deployment Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    permissions:
      issues: write
      contents: read
    
    steps:
      - name: Create GitHub Issue for Failed Deployment
        uses: actions/github-script@v7
        with:
          script: |
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const sha = '${{ github.sha }}';
            const shortSha = sha.substring(0, 7);
            const branch = '${{ github.ref_name }}';
            const actor = '${{ github.actor }}';

            const issueTitle = `Deployment Failed - ${shortSha}`;
            const issueBody = [
              '## Deployment Failure Report',
              '',
              `**Deployment failed for commit:** \`${shortSha}\` (${sha})`,
              `**Branch:** \`${branch}\``,
              `**Triggered by:** @${actor}`,
              `**Workflow Run:** ${runUrl}`,
              '',
              '### Details',
              'The automated deployment process encountered an error. Please review the workflow logs for detailed error information.',
              '',
              '### Next Steps',
              `1. Check the [workflow run logs](${runUrl}) for specific error messages`,
              `2. Review recent changes in commit ${shortSha}`,
              '3. Fix the issue and push a new commit to trigger re-deployment',
              '',
              '---',
              '*This issue was automatically created by the deployment workflow.*'
            ].join('\n');

            // Check if there's already an open issue for this deployment
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'deployment-failure',
              per_page: 100
            });

            // Look for an issue with the same title
            const duplicateIssue = existingIssues.data.find(
              issue => issue.title === issueTitle
            );

            if (duplicateIssue) {
              console.log(`Issue already exists for this deployment: #${duplicateIssue.number}`);

              // Add a comment to the existing issue
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: duplicateIssue.number,
                body: `Deployment failure occurred again.\n\n**New workflow run:** ${runUrl}`
              });
            } else {
              // Create new issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['deployment-failure', 'automated']
              });

              console.log(`Created issue #${newIssue.data.number}`);
            }
